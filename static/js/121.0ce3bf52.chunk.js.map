{"version":3,"file":"static/js/121.0ce3bf52.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactsListItem/ContactsListItem.module.css?e52b","components/ContactsListItem/ContactsListItem.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactList.module.css?ae34","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/pages/Contacts/Contacts.module.css","components/pages/Contacts/Contacts.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ContactForm\":\"ContactForm_ContactForm__QuT-m\",\"submitBtn\":\"ContactForm_submitBtn__lg06P\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport shortid from 'shortid';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { getContacts } from 'redux/ContactsListSlice';\nimport { postContact } from 'components/api';\n\nexport const ContactForm = () => {\n\tconst [name, setName] = useState('');\n\tconst [phone, setPhone] = useState('');\n\tconst dispatch = useDispatch();\n\tconst contacts = useSelector(getContacts);\n\n\tconst handleChange = e => {\n\t\tconst { name, value } = e.currentTarget;\n\n\t\tif (name === 'name') setName(value);\n\t\tif (name === 'phone') setPhone(value);\n\t};\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tconst id = shortid.generate();\n\n\t\tif (\n\t\t\tcontacts.find(\n\t\t\t\tcontact => contact.name.toLowerCase() === name.toLowerCase()\n\t\t\t)\n\t\t) {\n\t\t\talert(`${name} is already in contacts!`);\n\t\t} else {\n\t\t\tdispatch(postContact({\n\t\t\t\tid,\n\t\t\t\tname,\n\t\t\t\tphone,\n\t\t\t}))\n\t\t}\n\n\t\tsetName('');\n\t\tsetPhone('');\n\n\t\te.currentTarget.reset();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<form className={css.ContactForm} onSubmit={handleSubmit}>\n\t\t\t\t<label>\n\t\t\t\t\tName\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\ttitle=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\tNumber\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\tname=\"phone\"\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tvalue={phone}\n\t\t\t\t\t\ttitle=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<button type=\"submit\" className={css.submitBtn}>\n\t\t\t\t\tAdd contact\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</>\n\t);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactsListItem\":\"ContactsListItem_ContactsListItem__0keFU\"};","import css from '../ContactsListItem/ContactsListItem.module.css'\nimport PropTypes from 'prop-types';\n\nexport const ContactsListItem = ({ name, phone, children }) =>\n(<li className={css.ContactsListItem} >\n\t<p>\n\t\t{name} : {phone}\n\t</p>\n\t{children}\n</li>)\n\n\nContactsListItem.protoTypes = {\n\tname: PropTypes.string.isRequired,\n\tnumber: PropTypes.number.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactList_contactsList__a5jYl\"};","import { ContactsListItem } from 'components/ContactsListItem/ContactsListItem';\nimport { deleteContactById } from 'components/api';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport css from '../ContactsList/ContactList.module.css';\n\nexport const ContactsList = ({ contacts }) => {\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<ul className={css.contactsList}>\n\t\t\t{contacts.map(({ name, phone, id }) => (\n\t\t\t\t<ContactsListItem key={id} name={name} phone={phone}>\n\t\t\t\t\t<button type=\"button\" onClick={() => dispatch(deleteContactById(id))}>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</button>\n\t\t\t\t</ContactsListItem>\n\t\t\t))}\n\t\t</ul>\n\t);\n};\n\n\nContactsList.protoTypes = {\n\tcontacts: PropTypes.array.isRequired,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Filter\":\"Filter_Filter__Gzk39\"};","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport css from '../Filter/Filter.module.css';\n\nexport const Filter = ({ changeFilter }) => {\n\tconst filterValue = useSelector(state => state.filter);\n\n\treturn (\n\t\t<label className={css.Filter}>\n\t\t\tFind contacts by name\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tname=\"filter\"\n\t\t\t\tvalue={filterValue}\n\t\t\t\tonChange={changeFilter}\n\t\t\t\t// pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n\t\t\t\ttitle=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n\t\t\t\trequired\n\t\t\t/>\n\t\t</label>\n\t);\n};\n\n\nFilter.protoTypes = {\n\tonChange: PropTypes.func.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {};","import { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addFilterText } from 'redux/FilterSlice';\nimport { getContacts, getError, getIsLoading } from 'redux/ContactsListSlice';\nimport { getFilterValue } from 'redux/FilterSlice';\nimport { fetchContacts } from 'components/api';\nimport css from './Contacts.module.css';\n\n const Contacts = () => {\n\tconst contacts = useSelector(getContacts);\n\tconst filterValue = useSelector(getFilterValue);\n\tconst isLoading = useSelector(getIsLoading);\n\tconst error = useSelector(getError);\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tdispatch(fetchContacts())\n\t}, [dispatch])\n\n\tconst changeFilter = e => {\n\t\tconst { value } = e.currentTarget;\n\n\t\tdispatch(addFilterText(value));\n\t};\n\n\tconst getFilteredContacts = () => {\n\t\tconst normalizedFilter = filterValue.toLowerCase();\n\n\t\treturn contacts.filter(contact =>\n\t\t\tcontact.name.toLowerCase().includes(normalizedFilter)\n\t\t);\n\t};\n\n\tconst filteredContacts = getFilteredContacts();\n\n\treturn (\n\t\t<div className={css.phonebook}>\n\t\t\t<h1>Phonebook</h1>\n\t\t\t<ContactForm />\n\t\t\t<h2>Contacts</h2>\n\t\t\t<Filter changeFilter={changeFilter} />\n\t\t\t{contacts.length > 0 && <ContactsList contacts={filteredContacts} />}\n\t\t\t{error && <h3>{error}</h3>}\n\t\t\t{isLoading && <h3>Loading...</h3>}\n\t\t</div>\n\t);\n};\n\n\n\nexport default Contacts;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["ContactForm","useState","name","setName","phone","setPhone","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","e","currentTarget","value","className","css","onSubmit","preventDefault","id","shortid","find","contact","toLowerCase","alert","postContact","reset","type","onChange","title","required","ContactsListItem","children","protoTypes","PropTypes","number","ContactsList","map","onClick","deleteContactById","Filter","changeFilter","filterValue","state","filter","getFilterValue","isLoading","getIsLoading","error","getError","useEffect","fetchContacts","filteredContacts","normalizedFilter","includes","getFilteredContacts","addFilterText","length","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","setCharacters","_alphabet_","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}